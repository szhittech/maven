/*
 * Copyright 2015 szhittech
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'maven'
//becase het is not sigining
//apply plugin: 'signing'
def isHet() {
    return ISHET.contains("het")
}

def isReleaseBuild() {
    return VERSION_NAME.contains("SNAPSHOT") == false
}

def getReleaseRepositoryUrl() {
    if (isHet()){
        return hasProperty('HET_NEXUS_RELEASES') ? HET_NEXUS_RELEASES
                : "http://200.200.200.40:8083/nexus/content/repositories/releases/"
    }else{
        hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
                : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
    }
}

def getSnapshotRepositoryUrl() {
    if (isHet()){
        return hasProperty('HET_NEXUS_SNAPSHOTS') ? HET_NEXUS_SNAPSHOTS
                : "http://200.200.200.40:8083/nexus/content/repositories/snapshots/"
    }else{
        return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
                : "https://oss.sonatype.org/content/repositories/snapshots/"
    }
}

def getRepositoryUsername() {
    if (isHet()){
        return hasProperty('NEXUS_USERNAME_HET') ? NEXUS_USERNAME_HET : ""
    }else{
        return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
    }

}

def getRepositoryPassword() {
    if (isHet()){
        return hasProperty('NEXUS_PASSWORD_HET') ? NEXUS_PASSWORD_HET : ""
    }else{
        return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
    }
}

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                //becase het is not sigining pad POM_ARTIFACT_ID VERSION_NAME
                //beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                println("=================="+project.modulename +":"+project.moduleversion)
                pom.groupId = GROUP
                pom.artifactId = project.modulename
                pom.version = project.moduleversion

                repository(url: getReleaseRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }
                snapshotRepository(url: getSnapshotRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }

                pom.project {
                    name project.modulename
                    packaging POM_PACKAGING
                    description POM_DESCRIPTION
                    //annotation
                    //url POM_URL

                    //becase het is not connect the third Maven Centeral
                    /*scm {
                        url POM_SCM_URL
                        connection POM_SCM_CONNECTION
                        developerConnection POM_SCM_DEV_CONNECTION
                    }*/

                    licenses {
                        license {
                            name POM_LICENCE_NAME
                            url POM_LICENCE_URL
                            distribution POM_LICENCE_DIST
                        }
                    }

                    developers {
                        developer {
                            id POM_DEVELOPER_ID
                            name POM_DEVELOPER_NAME
                        }
                    }
                }
            }
        }
    }
//becase het is not sigining
    /*signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }*/


    //all right,add this code will result in the unreadable code
    task androidJavadocs(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }
    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
        classifier = 'javadoc'
        from androidJavadocs.destinationDir
    }
    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.sourceFiles
    }
    artifacts {
        archives androidSourcesJar
        //archives androidJavadocsJar
    }
}